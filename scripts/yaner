#!/usr/bin/env python
# vim:fileencoding=UTF-8

# This file is part of Yaner.

# Yaner - GTK+ interface for aria2 download mananger
# Copyright (C) 2010-2011  Iven <ivenvd#gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
    This is the entry to the main application of yaner, and should be
placed under a directory in $PATH.
    We just do some requirement checking here, and then load the main
window of the application.
"""

import sys
import gettext
import argparse

from yaner import __package__
from yaner.Misc import _VERSION

# Setup Translation
gettext.install('yaner')

# Parse command line arguments
options = None
if len(sys.argv) > 1:
    parser = argparse.ArgumentParser(
            description=_('{0} download mananger.').format(__package__))
    parser.add_argument('-n', '--rename', metavar='FILENAME',
            help=_('filename to save'))
    parser.add_argument('-r', '--referer', nargs='?', const='',
            default='', help=_('referer page of the link'))
    parser.add_argument('-c', '--cookie', nargs='?', const='',
            default='', help=_('cookies of the website'))
    parser.add_argument('uris', nargs='*', metavar='URI | MAGNET',
            help=_('the download addresses'))
    parser.add_argument('-v', '--version', action=_VERSION, nargs=0,
            help=_('output version information and exit'))
    args = parser.parse_args()

    options = {'referer': args.referer,
               'header': 'Cookie: {}'.format(args.cookie),
               'uris': str(args.uris),
              }
    if args.rename is not None:
        options['out'] = args.rename

# Requirements
try:
    import gi
except ImportError:
    raise SystemExit(' * Error: pygobject required')

try:
    gi.require_version('Gtk', '3.0')
except ValueError:
    raise SystemExit(' * Error: Gtk3 required')

try:
    gi.require_version('GLib', '2.0')
except ValueError:
    raise SystemExit(' * Error: GLib2 required')
else:
    from gi.repository import GLib

try:
    from gi.repository import Notify
except ImportError:
    raise SystemExit(' * Error: libnotify required')
else:
    Notify.init('yaner')

# Start the Application
from yaner.Application import Application
main_app = Application()
if options is not None:
    main_app.register(None)
    # FIXME: GLib works strange when passing dictionaries, maybe a bug
    main_app.activate_action('cmdline', GLib.Variant.new_string(str(options)))
main_app.run(None)

